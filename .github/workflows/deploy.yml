name: Deployment

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check-gradle-version:
    runs-on: ubuntu-latest
    outputs:
      mod_version: ${{ steps.mod_version.outputs.mod_version }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Get mod_version from gradle.properties
        id: mod_version
        run: |
          MOD_VERSION=$(grep 'mod_version=' gradle.properties | cut -d'=' -f2)
          echo "mod_version=$MOD_VERSION" >> $GITHUB_ENV
          echo "mod_version=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "Found mod_version: $MOD_VERSION"

      - name: Get latest GitHub release version
        id: latest_release
        run: |
          LATEST_VERSION=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          if [ "$LATEST_VERSION" == "null" ]; then
            echo "No releases found. Skipping version check."
            exit 0
          fi
          echo "Latest release version: $LATEST_VERSION"
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Fail if mod_version matches the latest release version
        run: |
          if [ "${{ env.mod_version }}" == "${{ env.latest_version }}" ]; then
            echo "The mod_version (${{ env.mod_version }}) matches the latest GitHub release version (${{ env.latest_version }}). Failing the pipeline."
            exit 1
          else
            echo "mod_version (${{ env.mod_version }}) is different from the latest release version (${{ env.latest_version }}). Proceeding with the build."
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-gradle-version
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.10.2"

      - name: Build Project (remapJar)
        run: gradle remapJar

      - name: Save Build Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: remap-jar
          path: build/libs/*.jar

  manual-release:
    runs-on: ubuntu-latest
    needs: [build, check-gradle-version]
    environment: release
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v4
        with:
          gradle-version: "8.10.2"

      - name: Publish to CurseForge
        if: always()
        run: gradle publishToCurseForge -PcurseForgeToken=${{ secrets.CURSE_FORGE_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-gradle-version.outputs.mod_version }}
          name: ${{ needs.check-gradle-version.outputs.mod_version }}
          generate_release_notes: true
          make_latest: true
          files: build/libs/*.jar
